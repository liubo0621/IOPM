package cn.com.pattek.Subject.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.smartcardio.ATR;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.collections.map.HashedMap;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;

import cn.com.pattek.RelatedNews.entity.ArticleInfo;
import cn.com.pattek.Subject.dao.SubjectDao;
import cn.com.pattek.Subject.entity.TabIopmSubject;
import cn.com.pattek.core.struts2.BaseAction;
import cn.com.pattek.core.struts2.JsonUtils;
import cn.com.pattek.utils.ESSearchUtils;

import com.opensymphony.xwork2.ActionContext;


public class SubjectAction extends BaseAction{


	@Autowired
	private SubjectDao subjectDao;
	
	
	

	

	/** 专题名称 **/
	private String name;
	/** 开始时间 **/
	private Date startTime;
	/** 结束时间 **/
	private Date endTime;
	/** 包含的关键词 （空格表示与， 逗号表示或） **/
	private String keyword1;
	/** 不包含的关键词（空格表示与 ，逗号表示或） **/
	private String keyword2;
	


	//添加专题
	public String addSubject() throws Exception{
		TabIopmSubject tabIopmSubject = new TabIopmSubject();
	    tabIopmSubject.setName(name);
		tabIopmSubject.setStartTime(startTime);
		tabIopmSubject.setEndTime(endTime);
		tabIopmSubject.setKeyword1(keyword1);
		tabIopmSubject.setKeyword2(keyword2);
		subjectDao.addSubject(tabIopmSubject);
		System.out.println("我来添加了");
		return null;
	}
	
	//查询所有专题
	public String selectAllSubject() throws Exception{
		
		List<Map<String, Object>> list2 = subjectDao.selectAllSubject();
		this.arrayToJson(list2);
		return null;
	}
	
	
	
	//舆情概述拼接版(直接可以返回字符串)
	public String startAndEndSbujectById() throws Exception {
		/*HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("application/json;charset=UTF-8");*/
		/*//获取前台传入的id
		String id = request.getParameter("aaa");
		//将获取到的id转换成Long类型
		Long value = Long.valueOf(id);*/
		ESSearchUtils es = ESSearchUtils.getInstance();
		
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		System.out.println("关键字为"+keyWord1);
		String subjectStart = subjectDao.subjectStart(1L);
		System.out.println("开始检测时间为"+subjectStart);
		
		//通过id查出关键字
		
		/*map.put("keyWord", subjectKeyWord1);*/
		//情感
/*		List<Map<String, Object>> emotionCount = subjectDao.getTimeAndEmotionCount(keyWord1);
		//查询出日期,和主流媒体数量
		List<Map<String, Object>> vipCount = subjectDao.getTimeAndVipCount(keyWord1);
		//查询出降序日期,以及类型,和数量
		List<Map<String,Object>> timeAndCount = subjectDao.getTimeAndCount(keyWord1);*/
		//通过关键字查询最后时间
		String subjectEnd = subjectDao.subjectEnd(keyWord1);
		
		System.out.println("专题最后一次出现的时间为"+subjectEnd);
		
		String subjectFirst = subjectDao.subjectFirst(keyWord1);
		System.out.println("专题第一次出现的时间为"+subjectFirst);

		//新闻数量
		StringBuffer newsSql =new StringBuffer();
		newsSql.append("select count(INFO_TYPE) from tab_iopm_article_info where TITLE LIKE");
		newsSql.append(subjectDao.splitKeyWord1(keyWord1));
		newsSql.append("and INFO_TYPE =1");
		System.out.println(newsSql);
		String newsSql1 = newsSql.toString();
		List<Object> searchBySqlnews = es.searchBySql(newsSql1);
		System.out.println("新闻数量为"+searchBySqlnews.get(0));
		
		
		//微博数量
		StringBuffer  weiboSql = new StringBuffer();
		weiboSql.append("select count(INFO_TYPE) from tab_iopm_article_info where TITLE LIKE");
		weiboSql.append(subjectDao.splitKeyWord1(keyWord1));
		weiboSql.append("and INFO_TYPE=3");
		String weiboSql1 = weiboSql.toString();
		List<Object> searchBySqlweibo = es.searchBySql(weiboSql1);
		System.out.println("微博数量为"+searchBySqlweibo.get(0));
		
		//论坛数量
		StringBuffer luntanSql = new StringBuffer();
		luntanSql.append("select count(INFO_TYPE) from tab_iopm_article_info where TITLE LIKE");
		luntanSql.append(subjectDao.splitKeyWord1(keyWord1));
		luntanSql.append("and INFO_TYPE=4");
		String luntanSql1 = luntanSql.toString();
		List<Object> searchBySqlluntan = es.searchBySql(luntanSql1);
		System.out.println("论坛数量为"+searchBySqlluntan.get(0));
		
		//视频
		StringBuffer videoSql = new StringBuffer();
		videoSql.append("select count(INFO_TYPE) from tab_iopm_article_info where TITLE LIKE");
		videoSql.append(subjectDao.splitKeyWord1(keyWord1));
		videoSql.append("and INFO_TYPE=8");
		String videoSql1 = videoSql.toString();
		List<Object> searchBySqlvideo = es.searchBySql(videoSql1);
		System.out.println("视频数量为"+searchBySqlvideo.get(0));
		
		//微信
		StringBuffer weixinSql = new StringBuffer();
		weixinSql.append("select count(INFO_TYPE) from tab_iopm_article_info where TITLE LIKE");
		weixinSql.append(subjectDao.splitKeyWord1(keyWord1));
		weixinSql.append("and INFO_TYPE=2");
		String weixinSql1 = videoSql.toString();
		List<Object> searchBySqlweixin = es.searchBySql(weixinSql1);
		System.out.println("视频数量为"+searchBySqlweixin.get(0));
		
		String webName = subjectDao.webName(subjectFirst);
		System.out.println("站点名称为"+webName);
		
		String titleName = subjectDao.titleName(subjectFirst);
		System.out.println("第一次出现标题为"+titleName);
		
		String peakTime = subjectDao.peakTime(keyWord1);
		System.out.println("高峰时间"+peakTime);
		
		String a1=null;
		Integer sumCount = Integer.valueOf((Integer) searchBySqlnews.get(0)) + Integer.valueOf((Integer) searchBySqlweibo.get(0)) + Integer.valueOf((Integer) searchBySqlluntan.get(0))+ Integer.valueOf((Integer) searchBySqlweixin.get(0)) + Integer.valueOf((Integer) searchBySqlvideo.get(0));
		if(sumCount>1000){
			a1="信息量极大,舆论关注度高,传播影响力大";
		}else if (sumCount<=1000 && sumCount>=100) {
			a1="信息量一般,舆论关注度一般,传播影响力一般";
		}else {
			a1="信息量小,舆论关注度小,传播影响力小";
		}
		String yuqing = "该分析报告的监测时间为"+subjectStart+"至"+subjectEnd+"，监测关键词主要包含“"+keyWord1+"”，监测数据全面覆盖了境内外互联网新闻、博客、论坛、微博和视频等多类型站点。";
		String yuqing2 = "在上述监测时间范围内，网上共计发布相关新闻"+searchBySqlnews.get(0)+"篇、微博"+searchBySqlweibo.get(0)+"篇、论坛主题帖"+searchBySqlluntan.get(0)+"篇、视频"+searchBySqlvideo.get(0)+"个。首条信息于"+subjectFirst+"发布在"+webName+"站点，标题为《"+titleName+"》。舆论最高峰出现在"+peakTime+"。总体而言，新闻媒体以及微博等社交媒体关于“"+keyWord1+"”事件的"+a1+"。";
		Map<String, String> map =new HashedMap();
		map.put("Public_sentiment1", yuqing);
		map.put("Public_sentiment2", yuqing2);
		
		System.out.println("该分析报告的监测时间为"+subjectStart+"至"+subjectEnd+"，监测关键词主要包含“"+keyWord1+"”，监测数据全面覆盖了境内外互联网新闻、博客、论坛、微博和视频等多类型站点。");
		System.out.println("在上述监测时间范围内，网上共计发布相关新闻"+searchBySqlnews.get(0)+"篇、微博"+searchBySqlweibo.get(0)+"篇、微信"+searchBySqlweixin.get(0)+"论坛主题帖"+searchBySqlluntan.get(0)+"篇、视频"+searchBySqlvideo.get(0)+"个。首条信息于"+subjectFirst+"发布在"+webName+"站点，标题为《"+titleName+"》。舆论最高峰出现在"+peakTime+"。总体而言，新闻媒体以及微博等社交媒体关于“"+keyWord1+"”事件的"+a1+"。");
		this.objectToJson(map);
		return null;
	}
	
	//事件阶段演化分析
	public String consensusByKeyWord() throws Exception{
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		//查出每天,以及信息类型,以及数量
		List<Map<String, Object>> list1 = subjectDao.getTimeAndCount(keyWord1);
		//查出主流媒体数量以及时间
		List<Map<String,Object>> list2 = subjectDao.getTimeAndVipCount(keyWord1);
		//查出总信息量
		List<Map<String,Object>> list3 = subjectDao.sumInfo(keyWord1);
		Map map = new HashedMap();
		map.put("InfoTypeAndCount",list1);
		map.put("VIPTimeAndCount",list2);
		map.put("SumInfo",list3);
		this.objectToJson(map);
		return null;
	}
	
	//主流媒体信息量
	public String evenStage() throws Exception{
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		
		//查询出日期,和主流媒体数量
		List<Map<String, Object>> vipCount = subjectDao.getTimeAndVipCount(keyWord1);
		
		
		//查询出降序日期,以及类型,和负面信息数量
		List<Map<String,Object>> timeAndCount = subjectDao.getTimeAndEmotionCount(keyWord1);
		
		Map map = new HashedMap();
		map.put("VIPCount", vipCount);
		map.put("badEmiton", timeAndCount);
		this.objectToJson(map);
		return null;
	}
	//微博平台传播趋势
	public String weiboCount() throws Exception{
		Map<String, Object> weiboMap = new HashedMap();
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		List<Map<String, Object>> weiBo = subjectDao.getWeiBo(keyWord1);
		this.arrayToJson(weiBo);
		return null;
	}
	//微信平台传播趋势
	public String weixinCount() throws Exception{
		Map<String, Object> weiboMap = new HashedMap();
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		List<Map<String, Object>> weiXin = subjectDao.getWeiXin(keyWord1);
		this.arrayToJson(weiXin);
		return null;
	}
	//主流媒体排名,以及负面
	public String MainstreamMedia() throws Exception{
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		//查询主流媒体信息总量
		List<Map<String, Object>> list = subjectDao.getMainstreamMedia(keyWord1);
		//查询主流媒体信息总量中的负面信息量
		List<Map<String,Object>> bad = subjectDao.getMainstreamMediaAndEmotionBad(keyWord1);
		Map map = new HashedMap();
		map.put("VIP", list);
		map.put("VIPAndbadEmiton", bad);
		this.objectToJson(map);
		/*this.arrayToJson(bad);
		
		this.arrayToJson(list);*/
		return null;
	}
	
	//微博平台各种排名
	public String weiboTrendRank() throws Exception{
//		HttpServletResponse response = ServletActionContext.getResponse();
//		response.setContentType("application/json;charset=UTF-8");
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		ESSearchUtils es = ESSearchUtils.getInstance();
		//最早排名前十
		StringBuffer earlySql =new StringBuffer();
		earlySql.append("SELECT RELEASE_TIME TIME,TITLE,WEBSITE_NAME FROM tab_iopm_article_info where TITLE like ");
		earlySql.append(subjectDao.splitKeyWord1(keyWord1));
		earlySql.append(" and INFO_TYPE=3 ORDER BY RELEASE_TIME ASC LIMIT 10 ");
		List<Object> early = es.searchBySql(earlySql.toString());
		Object early1 = early.get(1);
		
		//点赞最多前十
		StringBuffer upMaxSql =new StringBuffer();
		upMaxSql.append("SELECT RELEASE_TIME TIME,TITLE,WEBSITE_NAME FROM tab_iopm_article_info where TITLE like ");
		upMaxSql.append(subjectDao.splitKeyWord1(keyWord1));
		upMaxSql.append(" AND INFO_TYPE=3 ORDER BY UP_COUNT DESC LIMIT 10");
		List<Object> upMax = es.searchBySql(upMaxSql.toString());
		Object upMax1 = upMax.get(1);		
		
		//转发最多前十
		StringBuffer transmitSql =new StringBuffer();
		transmitSql.append("SELECT RELEASE_TIME TIME,TITLE,WEBSITE_NAME FROM tab_iopm_article_info where TITLE like ");
		transmitSql.append(subjectDao.splitKeyWord1(keyWord1));
		transmitSql.append(" AND INFO_TYPE=3 ORDER BY TRANSMIT_COUNT DESC LIMIT 10");
		List<Object> transmit = es.searchBySql(transmitSql.toString());
		Object transmit1 = transmit.get(1);		
		
		//评论最多
		StringBuffer commentSql =new StringBuffer();
		commentSql.append("SELECT RELEASE_TIME TIME,TITLE,WEBSITE_NAME FROM tab_iopm_article_info where TITLE like ");
		commentSql.append(subjectDao.splitKeyWord1(keyWord1));
		commentSql.append(" AND INFO_TYPE=3 ORDER BY COMMENT_COUNT DESC LIMIT 10");
		List<Object> comment = es.searchBySql(commentSql.toString());
		Object comment1 = comment.get(1);	
		
		
		Map map = new HashedMap();
		map.put("early", early1);
		map.put("upMax", upMax1);
		map.put("transmit", transmit1);
		map.put("comment", comment1);
		this.objectToJson(map);
/*		this.arrayToJson(early);
		this.arrayToJson(upMax);
		this.arrayToJson(transmit);
		this.arrayToJson(comment);*/
		return null;
	}
	
	//微博平台排名分析
	public String weiboTrendRandText() throws Exception{
		//截止至时间
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		String subjectEnd = subjectDao.subjectEndTime(1L);
		ESSearchUtils es = ESSearchUtils.getInstance();
		//相关信息数量
		String sql1 = subjectDao.splitKeyWord1("SELECT count(1) FROM tab_iopm_article_info where TITLE like ", keyWord1, " and INFO_TYPE=3");
		List<Object> weiBoCount = es.searchBySql(sql1);
		Object realWeiBoCount = weiBoCount.get(0);
		//最早的博主和标题
		String firstAuthorSql = subjectDao.splitKeyWord1("SELECT AUTHOR,TITLE FROM tab_iopm_article_info WHERE TITLE LIKE ", keyWord1, " AND INFO_TYPE=3 ORDER BY COMMENT_COUNT DESC LIMIT 1");
		//SELECT AUTHOR FROM tab_iopm_article_info WHERE TITLE LIKE '%焦点访谈%'AND INFO_TYPE=3 ORDER BY COMMENT_COUNT DESC LIMIT 1
		List<Object> firstAAndT = es.searchBySql(firstAuthorSql);
		Object object = firstAAndT.get(1);
		JSONArray jsonobject = JSONArray.fromObject(object);
	arrayToJson(object);
		/*ArrayList<ArticleInfo> object = (ArrayList<ArticleInfo>) firstAuthor.get(1);
		ArticleInfo articleInfo = object.get(0);
		String author1 = articleInfo.getAuthor();
		String title1 = articleInfo.getTitle();
		
		//参与率最高的博主和标题
		String INTERACTIONsql = subjectDao.splitKeyWord1("SELECT TITLE,AUTHOR,WEBSITE_NAME FROM tab_iopm_article_info WHERE TITLE LIKE ", keyWord1, " AND INFO_TYPE=3 ORDER BY INTERACTION_COUNT DESC");
		List<Object> searchINTERACTION = es.searchBySql(INTERACTIONsql);
		ArrayList<ArticleInfo> object2 = (ArrayList<ArticleInfo>) searchINTERACTION.get(1);
		ArticleInfo articleInfo2 = object2.get(0);
		String author2 = articleInfo2.getAuthor();
		String title2 = articleInfo2.getTitle();
		
		String str1 = "截至"+subjectEnd+"，新浪微博平台发布相关微博信息共计"+realWeiBoCount+"条，其中"+author1+"博主最早声明【"+title1+"】，"+author2+"博主发布的【"+title2+"】用户参与率最高";
		Map<String, Object> map = new HashedMap();
		map.put("str", str1);
		this.objectToJson(map);*/
		//截至2017年07月22日12时，新浪微博平台发布相关微博信息共计218323条，其中xxxx博主最早声明【文章内容】，xxx博主发布的【文章内容】用户参与率最高
		return null;
	}
	
	//微信平台各种排名
	public String weixinTrendRank() throws Exception{
		String keyWord1 = subjectDao.subjectKeyWord1(1L);
		ESSearchUtils es = ESSearchUtils.getInstance();
		//最早排名前十
		StringBuffer earlySql =new StringBuffer();
		earlySql.append("SELECT RELEASE_TIME TIME,TITLE,WEBSITE_NAME FROM tab_iopm_article_info where TITLE like ");
		earlySql.append(subjectDao.splitKeyWord1(keyWord1));
		earlySql.append(" and INFO_TYPE=2 ORDER BY RELEASE_TIME ASC LIMIT 10 ");
		List<Object> early = es.searchBySql(earlySql.toString());
		Object early1 = early.get(1);		
		
		//点赞最多
		StringBuffer upMaxSql =new StringBuffer();
		upMaxSql.append("SELECT RELEASE_TIME TIME,TITLE,WEBSITE_NAME FROM tab_iopm_article_info where TITLE like ");
		upMaxSql.append(subjectDao.splitKeyWord1(keyWord1));
		upMaxSql.append(" AND INFO_TYPE=2 ORDER BY UP_COUNT DESC LIMIT 10");
		List<Object> upMax = es.searchBySql(upMaxSql.toString());
		Object upMax1 = upMax.get(1);		
		
		//评论最多
		StringBuffer commentSql =new StringBuffer();
		commentSql.append("SELECT RELEASE_TIME TIME,TITLE,WEBSITE_NAME FROM tab_iopm_article_info where TITLE like ");
		commentSql.append(subjectDao.splitKeyWord1(keyWord1));
		commentSql.append(" AND INFO_TYPE=2 ORDER BY COMMENT_COUNT DESC LIMIT 10");
		List<Object> comment = es.searchBySql(commentSql.toString());
		Object comment1 = comment.get(1);	
		
		Map map = new HashedMap();
		map.put("early", early1);
		map.put("upMax", upMax1);
		map.put("comment", comment1);
		this.objectToJson(map);
		return null;
	}
	
	
	
	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public Date getStartTime() {
		return startTime;
	}
	
	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}
	
	public Date getEndTime() {
		return endTime;
	}
	
	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}
	
	public String getKeyword1() {
		return keyword1;
	}
	
	public void setKeyword1(String keyword1) {
		this.keyword1 = keyword1;
	}
	
	public String getKeyword2() {
		return keyword2;
	}
	
	public void setKeyword2(String keyword2) {
		this.keyword2 = keyword2;
	}

}
